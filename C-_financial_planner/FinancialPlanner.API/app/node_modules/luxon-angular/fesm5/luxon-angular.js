import { __spread, __decorate } from 'tslib';
import { Pipe, ChangeDetectorRef, NgModule } from '@angular/core';
import { DateTime, Duration } from 'luxon';
import { interval } from 'rxjs';

var DateTimeEarliestPipe = /** @class */ (function () {
    function DateTimeEarliestPipe() {
    }
    DateTimeEarliestPipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.min.apply(DateTime, __spread(value)));
    };
    DateTimeEarliestPipe = __decorate([
        Pipe({
            name: 'dateTimeEarliest'
        })
    ], DateTimeEarliestPipe);
    return DateTimeEarliestPipe;
}());

var DateTimeFromFormatPipe = /** @class */ (function () {
    function DateTimeFromFormatPipe() {
    }
    DateTimeFromFormatPipe.prototype.transform = function (value, format) {
        return (value == null ? null : DateTime.fromFormat(value, format));
    };
    DateTimeFromFormatPipe = __decorate([
        Pipe({
            name: 'dateTimeFromFormat'
        })
    ], DateTimeFromFormatPipe);
    return DateTimeFromFormatPipe;
}());

var DateTimeFromHttpPipe = /** @class */ (function () {
    function DateTimeFromHttpPipe() {
    }
    DateTimeFromHttpPipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.fromHTTP(value));
    };
    DateTimeFromHttpPipe = __decorate([
        Pipe({
            name: 'dateTimeFromHttp'
        })
    ], DateTimeFromHttpPipe);
    return DateTimeFromHttpPipe;
}());

var DateTimeFromIsoPipe = /** @class */ (function () {
    function DateTimeFromIsoPipe() {
    }
    DateTimeFromIsoPipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.fromISO(value));
    };
    DateTimeFromIsoPipe = __decorate([
        Pipe({
            name: 'dateTimeFromIso'
        })
    ], DateTimeFromIsoPipe);
    return DateTimeFromIsoPipe;
}());

var DateTimeFromJsDatePipe = /** @class */ (function () {
    function DateTimeFromJsDatePipe() {
    }
    DateTimeFromJsDatePipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.fromJSDate(value));
    };
    DateTimeFromJsDatePipe = __decorate([
        Pipe({
            name: 'dateTimeFromJsDate'
        })
    ], DateTimeFromJsDatePipe);
    return DateTimeFromJsDatePipe;
}());

var DateTimeFromMillisecondsPipe = /** @class */ (function () {
    function DateTimeFromMillisecondsPipe() {
    }
    DateTimeFromMillisecondsPipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.fromMillis(value));
    };
    DateTimeFromMillisecondsPipe = __decorate([
        Pipe({
            name: 'dateTimeFromMilliseconds'
        })
    ], DateTimeFromMillisecondsPipe);
    return DateTimeFromMillisecondsPipe;
}());

var DateTimeFromRfc2822Pipe = /** @class */ (function () {
    function DateTimeFromRfc2822Pipe() {
    }
    DateTimeFromRfc2822Pipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.fromRFC2822(value));
    };
    DateTimeFromRfc2822Pipe = __decorate([
        Pipe({
            name: 'dateTimeFromRfc2822'
        })
    ], DateTimeFromRfc2822Pipe);
    return DateTimeFromRfc2822Pipe;
}());

var DateTimeFromSqlPipe = /** @class */ (function () {
    function DateTimeFromSqlPipe() {
    }
    DateTimeFromSqlPipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.fromSQL(value));
    };
    DateTimeFromSqlPipe = __decorate([
        Pipe({
            name: 'dateTimeFromSql'
        })
    ], DateTimeFromSqlPipe);
    return DateTimeFromSqlPipe;
}());

var DateTimeLatestPipe = /** @class */ (function () {
    function DateTimeLatestPipe() {
    }
    DateTimeLatestPipe.prototype.transform = function (value) {
        return (value == null ? null : DateTime.max.apply(DateTime, __spread(value)));
    };
    DateTimeLatestPipe = __decorate([
        Pipe({
            name: 'dateTimeLatest'
        })
    ], DateTimeLatestPipe);
    return DateTimeLatestPipe;
}());

var DateTimeToFormatPipe = /** @class */ (function () {
    function DateTimeToFormatPipe() {
    }
    DateTimeToFormatPipe.prototype.transform = function (value, format) {
        return (value == null ? null : value.toFormat(format));
    };
    DateTimeToFormatPipe = __decorate([
        Pipe({
            name: 'dateTimeToFormat'
        })
    ], DateTimeToFormatPipe);
    return DateTimeToFormatPipe;
}());

var DateTimeToIsoDatePipe = /** @class */ (function () {
    function DateTimeToIsoDatePipe() {
    }
    DateTimeToIsoDatePipe.prototype.transform = function (value) {
        return (value == null ? null : value.toISODate());
    };
    DateTimeToIsoDatePipe = __decorate([
        Pipe({
            name: 'dateTimeToIsoDate'
        })
    ], DateTimeToIsoDatePipe);
    return DateTimeToIsoDatePipe;
}());

var DateTimeToIsoTimePipe = /** @class */ (function () {
    function DateTimeToIsoTimePipe() {
    }
    DateTimeToIsoTimePipe.prototype.transform = function (value) {
        return (value == null ? null : value.toISOTime());
    };
    DateTimeToIsoTimePipe = __decorate([
        Pipe({
            name: 'dateTimeToIsoTime'
        })
    ], DateTimeToIsoTimePipe);
    return DateTimeToIsoTimePipe;
}());

var DateTimeToIsoWeekDatePipe = /** @class */ (function () {
    function DateTimeToIsoWeekDatePipe() {
    }
    DateTimeToIsoWeekDatePipe.prototype.transform = function (value) {
        return (value == null ? null : value.toISOWeekDate());
    };
    DateTimeToIsoWeekDatePipe = __decorate([
        Pipe({
            name: 'dateTimeToIsoWeekDate'
        })
    ], DateTimeToIsoWeekDatePipe);
    return DateTimeToIsoWeekDatePipe;
}());

var DateTimeToIsoPipe = /** @class */ (function () {
    function DateTimeToIsoPipe() {
    }
    DateTimeToIsoPipe.prototype.transform = function (value) {
        return (value == null ? null : value.toISO());
    };
    DateTimeToIsoPipe = __decorate([
        Pipe({
            name: 'dateTimeToIso'
        })
    ], DateTimeToIsoPipe);
    return DateTimeToIsoPipe;
}());

var DateTimeToJsDatePipe = /** @class */ (function () {
    function DateTimeToJsDatePipe() {
    }
    DateTimeToJsDatePipe.prototype.transform = function (value) {
        return (value == null ? null : value.toJSDate());
    };
    DateTimeToJsDatePipe = __decorate([
        Pipe({
            name: 'dateTimeToJsDate'
        })
    ], DateTimeToJsDatePipe);
    return DateTimeToJsDatePipe;
}());

var DateTimeToLocalPipe = /** @class */ (function () {
    function DateTimeToLocalPipe() {
    }
    DateTimeToLocalPipe.prototype.transform = function (value) {
        return (value == null ? null : value.toLocal());
    };
    DateTimeToLocalPipe = __decorate([
        Pipe({
            name: 'dateTimeToLocal'
        })
    ], DateTimeToLocalPipe);
    return DateTimeToLocalPipe;
}());

var DateTimeToRelativePipe = /** @class */ (function () {
    function DateTimeToRelativePipe(ref) {
        this.ref = ref;
    }
    DateTimeToRelativePipe.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    DateTimeToRelativePipe.prototype.transform = function (value, unit, style) {
        var _this = this;
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(function () { return _this.ref.markForCheck(); });
        }
        return value.toRelative({
            style: style,
            unit: unit
        });
    };
    DateTimeToRelativePipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    DateTimeToRelativePipe = __decorate([
        Pipe({
            name: 'dateTimeToRelative',
            pure: false
        })
    ], DateTimeToRelativePipe);
    return DateTimeToRelativePipe;
}());

var DateTimeToRelativeCalendarPipe = /** @class */ (function () {
    function DateTimeToRelativeCalendarPipe(ref) {
        this.ref = ref;
    }
    DateTimeToRelativeCalendarPipe.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    DateTimeToRelativeCalendarPipe.prototype.transform = function (value, unit) {
        var _this = this;
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(function () { return _this.ref.markForCheck(); });
        }
        return value.toRelativeCalendar({
            unit: unit
        });
    };
    DateTimeToRelativeCalendarPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    DateTimeToRelativeCalendarPipe = __decorate([
        Pipe({
            name: 'dateTimeToRelativeCalendar',
            pure: false
        })
    ], DateTimeToRelativeCalendarPipe);
    return DateTimeToRelativeCalendarPipe;
}());

var DateTimeToSqlPipe = /** @class */ (function () {
    function DateTimeToSqlPipe() {
    }
    DateTimeToSqlPipe.prototype.transform = function (value) {
        return (value == null ? null : value.toSQL());
    };
    DateTimeToSqlPipe = __decorate([
        Pipe({
            name: 'dateTimeToSql'
        })
    ], DateTimeToSqlPipe);
    return DateTimeToSqlPipe;
}());

var DateTimeToUtcPipe = /** @class */ (function () {
    function DateTimeToUtcPipe() {
    }
    DateTimeToUtcPipe.prototype.transform = function (value) {
        return (value == null ? null : value.toUTC());
    };
    DateTimeToUtcPipe = __decorate([
        Pipe({
            name: 'dateTimeToUtc'
        })
    ], DateTimeToUtcPipe);
    return DateTimeToUtcPipe;
}());

var DurationFromIsoPipe = /** @class */ (function () {
    function DurationFromIsoPipe() {
    }
    DurationFromIsoPipe.prototype.transform = function (value) {
        return (value == null ? null : Duration.fromISO(value));
    };
    DurationFromIsoPipe = __decorate([
        Pipe({
            name: 'durationFromIso'
        })
    ], DurationFromIsoPipe);
    return DurationFromIsoPipe;
}());

var DurationFromMillisecondsPipe = /** @class */ (function () {
    function DurationFromMillisecondsPipe() {
    }
    DurationFromMillisecondsPipe.prototype.transform = function (value) {
        return (value == null ? null : Duration.fromMillis(value));
    };
    DurationFromMillisecondsPipe = __decorate([
        Pipe({
            name: 'durationFromMilliseconds'
        })
    ], DurationFromMillisecondsPipe);
    return DurationFromMillisecondsPipe;
}());

var DurationLongestPipe = /** @class */ (function () {
    function DurationLongestPipe() {
    }
    DurationLongestPipe.prototype.transform = function (value) {
        return (value == null ? null : __spread(value).sort(function (a, b) { return b.milliseconds - a.milliseconds; })[0]);
    };
    DurationLongestPipe = __decorate([
        Pipe({
            name: 'durationLongest'
        })
    ], DurationLongestPipe);
    return DurationLongestPipe;
}());

var DurationShortestPipe = /** @class */ (function () {
    function DurationShortestPipe() {
    }
    DurationShortestPipe.prototype.transform = function (value) {
        return (value == null ? null : __spread(value).sort(function (a, b) { return a.milliseconds - b.milliseconds; })[0]);
    };
    DurationShortestPipe = __decorate([
        Pipe({
            name: 'durationShortest'
        })
    ], DurationShortestPipe);
    return DurationShortestPipe;
}());

var DurationToFormatPipe = /** @class */ (function () {
    function DurationToFormatPipe() {
    }
    DurationToFormatPipe.prototype.transform = function (value, format) {
        return (value == null ? null : value.toFormat(format));
    };
    DurationToFormatPipe = __decorate([
        Pipe({
            name: 'durationToFormat'
        })
    ], DurationToFormatPipe);
    return DurationToFormatPipe;
}());

var DurationToIsoPipe = /** @class */ (function () {
    function DurationToIsoPipe() {
    }
    DurationToIsoPipe.prototype.transform = function (value) {
        return (value == null ? null : value.toISO());
    };
    DurationToIsoPipe = __decorate([
        Pipe({
            name: 'durationToIso'
        })
    ], DurationToIsoPipe);
    return DurationToIsoPipe;
}());

var PIPES = [
    DateTimeEarliestPipe,
    DateTimeFromFormatPipe,
    DateTimeFromHttpPipe,
    DateTimeFromIsoPipe,
    DateTimeFromJsDatePipe,
    DateTimeFromMillisecondsPipe,
    DateTimeFromRfc2822Pipe,
    DateTimeFromSqlPipe,
    DateTimeLatestPipe,
    DateTimeToFormatPipe,
    DateTimeToIsoDatePipe,
    DateTimeToIsoTimePipe,
    DateTimeToIsoWeekDatePipe,
    DateTimeToIsoPipe,
    DateTimeToJsDatePipe,
    DateTimeToLocalPipe,
    DateTimeToRelativePipe,
    DateTimeToRelativeCalendarPipe,
    DateTimeToSqlPipe,
    DateTimeToUtcPipe,
    DurationFromIsoPipe,
    DurationFromMillisecondsPipe,
    DurationLongestPipe,
    DurationShortestPipe,
    DurationToFormatPipe,
    DurationToIsoPipe
];
var LuxonModule = /** @class */ (function () {
    function LuxonModule() {
    }
    LuxonModule = __decorate([
        NgModule({
            declarations: PIPES,
            exports: [PIPES]
        })
    ], LuxonModule);
    return LuxonModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DateTimeEarliestPipe, DateTimeFromFormatPipe, DateTimeFromHttpPipe, DateTimeFromIsoPipe, DateTimeFromJsDatePipe, DateTimeFromMillisecondsPipe, DateTimeFromRfc2822Pipe, DateTimeFromSqlPipe, DateTimeLatestPipe, DateTimeToFormatPipe, DateTimeToIsoDatePipe, DateTimeToIsoPipe, DateTimeToIsoTimePipe, DateTimeToIsoWeekDatePipe, DateTimeToJsDatePipe, DateTimeToLocalPipe, DateTimeToRelativeCalendarPipe, DateTimeToRelativePipe, DateTimeToSqlPipe, DateTimeToUtcPipe, DurationFromIsoPipe, DurationFromMillisecondsPipe, DurationLongestPipe, DurationShortestPipe, DurationToFormatPipe, DurationToIsoPipe, LuxonModule };
//# sourceMappingURL=luxon-angular.js.map
