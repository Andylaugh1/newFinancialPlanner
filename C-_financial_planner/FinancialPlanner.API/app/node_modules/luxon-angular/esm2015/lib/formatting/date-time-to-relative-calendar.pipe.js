import { __decorate } from "tslib";
import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';
import { interval } from 'rxjs';
let DateTimeToRelativeCalendarPipe = class DateTimeToRelativeCalendarPipe {
    constructor(ref) {
        this.ref = ref;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    transform(value, unit) {
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(() => this.ref.markForCheck());
        }
        return value.toRelativeCalendar({
            unit
        });
    }
};
DateTimeToRelativeCalendarPipe.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DateTimeToRelativeCalendarPipe = __decorate([
    Pipe({
        name: 'dateTimeToRelativeCalendar',
        pure: false
    })
], DateTimeToRelativeCalendarPipe);
export { DateTimeToRelativeCalendarPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXRvLXJlbGF0aXZlLWNhbGVuZGFyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9sdXhvbi1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2Zvcm1hdHRpbmcvZGF0ZS10aW1lLXRvLXJlbGF0aXZlLWNhbGVuZGFyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQWdCLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU05QyxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtJQUd6QyxZQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtJQUFJLENBQUM7SUFFL0MsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBeUMsS0FBUSxFQUFFLElBQXFCO1FBQy9FLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNqQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2FBQzFCO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDN0U7UUFFRCxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztZQUM5QixJQUFJO1NBQ0wsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O1lBM0IwQixpQkFBaUI7O0FBSC9CLDhCQUE4QjtJQUoxQyxJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLElBQUksRUFBRSxLQUFLO0tBQ1osQ0FBQztHQUNXLDhCQUE4QixDQThCMUM7U0E5QlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVRpbWUsIFRvUmVsYXRpdmVVbml0IH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBpbnRlcnZhbCB9IGZyb20gJ3J4anMnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdkYXRlVGltZVRvUmVsYXRpdmVDYWxlbmRhcicsXG4gIHB1cmU6IGZhbHNlXG59KVxuZXhwb3J0IGNsYXNzIERhdGVUaW1lVG9SZWxhdGl2ZUNhbGVuZGFyUGlwZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNmb3JtIDxUIGV4dGVuZHMgRGF0ZVRpbWUgfCBudWxsIHwgdW5kZWZpbmVkPih2YWx1ZTogVCwgdW5pdD86IFRvUmVsYXRpdmVVbml0KSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gaW50ZXJ2YWwoMTAwMCkuc3Vic2NyaWJlKCgpID0+IHRoaXMucmVmLm1hcmtGb3JDaGVjaygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9SZWxhdGl2ZUNhbGVuZGFyKHtcbiAgICAgIHVuaXRcbiAgICB9KTtcbiAgfVxufVxuIl19