import { __decorate } from "tslib";
import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';
import { interval } from 'rxjs';
let DateTimeToRelativePipe = class DateTimeToRelativePipe {
    constructor(ref) {
        this.ref = ref;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    transform(value, unit, style) {
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(() => this.ref.markForCheck());
        }
        return value.toRelative({
            style,
            unit
        });
    }
};
DateTimeToRelativePipe.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DateTimeToRelativePipe = __decorate([
    Pipe({
        name: 'dateTimeToRelative',
        pure: false
    })
], DateTimeToRelativePipe);
export { DateTimeToRelativePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXRvLXJlbGF0aXZlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9sdXhvbi1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2Zvcm1hdHRpbmcvZGF0ZS10aW1lLXRvLXJlbGF0aXZlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQWdCLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU05QyxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQUdqQyxZQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtJQUFJLENBQUM7SUFFL0MsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBeUMsS0FBUSxFQUFFLElBQXFCLEVBQUUsS0FBbUM7UUFDcEgsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7YUFDMUI7WUFFRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztTQUM3RTtRQUVELE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUN0QixLQUFLO1lBQ0wsSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQTVCMEIsaUJBQWlCOztBQUgvQixzQkFBc0I7SUFKbEMsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLG9CQUFvQjtRQUMxQixJQUFJLEVBQUUsS0FBSztLQUNaLENBQUM7R0FDVyxzQkFBc0IsQ0ErQmxDO1NBL0JZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lLCBUb1JlbGF0aXZlVW5pdCB9IGZyb20gJ2x1eG9uJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgaW50ZXJ2YWwgfSBmcm9tICdyeGpzJztcblxuQFBpcGUoe1xuICBuYW1lOiAnZGF0ZVRpbWVUb1JlbGF0aXZlJyxcbiAgcHVyZTogZmFsc2Vcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVUb1JlbGF0aXZlUGlwZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNmb3JtIDxUIGV4dGVuZHMgRGF0ZVRpbWUgfCBudWxsIHwgdW5kZWZpbmVkPih2YWx1ZTogVCwgdW5pdD86IFRvUmVsYXRpdmVVbml0LCBzdHlsZT86ICdsb25nJyB8ICdzaG9ydCcgfCAnbmFycm93Jykge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IGludGVydmFsKDEwMDApLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlZi5tYXJrRm9yQ2hlY2soKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvUmVsYXRpdmUoe1xuICAgICAgc3R5bGUsXG4gICAgICB1bml0XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==