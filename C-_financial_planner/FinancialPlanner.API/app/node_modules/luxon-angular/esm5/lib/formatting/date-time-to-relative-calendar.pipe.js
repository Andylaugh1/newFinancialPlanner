import { __decorate } from "tslib";
import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';
import { interval } from 'rxjs';
var DateTimeToRelativeCalendarPipe = /** @class */ (function () {
    function DateTimeToRelativeCalendarPipe(ref) {
        this.ref = ref;
    }
    DateTimeToRelativeCalendarPipe.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    DateTimeToRelativeCalendarPipe.prototype.transform = function (value, unit) {
        var _this = this;
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(function () { return _this.ref.markForCheck(); });
        }
        return value.toRelativeCalendar({
            unit: unit
        });
    };
    DateTimeToRelativeCalendarPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    DateTimeToRelativeCalendarPipe = __decorate([
        Pipe({
            name: 'dateTimeToRelativeCalendar',
            pure: false
        })
    ], DateTimeToRelativeCalendarPipe);
    return DateTimeToRelativeCalendarPipe;
}());
export { DateTimeToRelativeCalendarPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXRvLXJlbGF0aXZlLWNhbGVuZGFyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9sdXhvbi1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2Zvcm1hdHRpbmcvZGF0ZS10aW1lLXRvLXJlbGF0aXZlLWNhbGVuZGFyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQWdCLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU05QztJQUdFLHdDQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtJQUFJLENBQUM7SUFFL0Msb0RBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELGtEQUFTLEdBQVQsVUFBa0QsS0FBUSxFQUFFLElBQXFCO1FBQWpGLGlCQWlCQztRQWhCQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDakIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzthQUMxQjtZQUVELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQXZCLENBQXVCLENBQUMsQ0FBQztTQUM3RTtRQUVELE9BQU8sS0FBSyxDQUFDLGtCQUFrQixDQUFDO1lBQzlCLElBQUksTUFBQTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQTFCd0IsaUJBQWlCOztJQUgvQiw4QkFBOEI7UUFKMUMsSUFBSSxDQUFDO1lBQ0osSUFBSSxFQUFFLDRCQUE0QjtZQUNsQyxJQUFJLEVBQUUsS0FBSztTQUNaLENBQUM7T0FDVyw4QkFBOEIsQ0E4QjFDO0lBQUQscUNBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95LCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlVGltZSwgVG9SZWxhdGl2ZVVuaXQgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIGludGVydmFsIH0gZnJvbSAncnhqcyc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2RhdGVUaW1lVG9SZWxhdGl2ZUNhbGVuZGFyJyxcbiAgcHVyZTogZmFsc2Vcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVUb1JlbGF0aXZlQ2FsZW5kYXJQaXBlIGltcGxlbWVudHMgT25EZXN0cm95LCBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICB0cmFuc2Zvcm0gPFQgZXh0ZW5kcyBEYXRlVGltZSB8IG51bGwgfCB1bmRlZmluZWQ+KHZhbHVlOiBULCB1bml0PzogVG9SZWxhdGl2ZVVuaXQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBpbnRlcnZhbCgxMDAwKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5yZWYubWFya0ZvckNoZWNrKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50b1JlbGF0aXZlQ2FsZW5kYXIoe1xuICAgICAgdW5pdFxuICAgIH0pO1xuICB9XG59XG4iXX0=