import { __decorate } from 'tslib';
import { Pipe, ChangeDetectorRef, NgModule } from '@angular/core';
import { DateTime, Duration } from 'luxon';
import { interval } from 'rxjs';

let DateTimeEarliestPipe = class DateTimeEarliestPipe {
    transform(value) {
        return (value == null ? null : DateTime.min(...value));
    }
};
DateTimeEarliestPipe = __decorate([
    Pipe({
        name: 'dateTimeEarliest'
    })
], DateTimeEarliestPipe);

let DateTimeFromFormatPipe = class DateTimeFromFormatPipe {
    transform(value, format) {
        return (value == null ? null : DateTime.fromFormat(value, format));
    }
};
DateTimeFromFormatPipe = __decorate([
    Pipe({
        name: 'dateTimeFromFormat'
    })
], DateTimeFromFormatPipe);

let DateTimeFromHttpPipe = class DateTimeFromHttpPipe {
    transform(value) {
        return (value == null ? null : DateTime.fromHTTP(value));
    }
};
DateTimeFromHttpPipe = __decorate([
    Pipe({
        name: 'dateTimeFromHttp'
    })
], DateTimeFromHttpPipe);

let DateTimeFromIsoPipe = class DateTimeFromIsoPipe {
    transform(value) {
        return (value == null ? null : DateTime.fromISO(value));
    }
};
DateTimeFromIsoPipe = __decorate([
    Pipe({
        name: 'dateTimeFromIso'
    })
], DateTimeFromIsoPipe);

let DateTimeFromJsDatePipe = class DateTimeFromJsDatePipe {
    transform(value) {
        return (value == null ? null : DateTime.fromJSDate(value));
    }
};
DateTimeFromJsDatePipe = __decorate([
    Pipe({
        name: 'dateTimeFromJsDate'
    })
], DateTimeFromJsDatePipe);

let DateTimeFromMillisecondsPipe = class DateTimeFromMillisecondsPipe {
    transform(value) {
        return (value == null ? null : DateTime.fromMillis(value));
    }
};
DateTimeFromMillisecondsPipe = __decorate([
    Pipe({
        name: 'dateTimeFromMilliseconds'
    })
], DateTimeFromMillisecondsPipe);

let DateTimeFromRfc2822Pipe = class DateTimeFromRfc2822Pipe {
    transform(value) {
        return (value == null ? null : DateTime.fromRFC2822(value));
    }
};
DateTimeFromRfc2822Pipe = __decorate([
    Pipe({
        name: 'dateTimeFromRfc2822'
    })
], DateTimeFromRfc2822Pipe);

let DateTimeFromSqlPipe = class DateTimeFromSqlPipe {
    transform(value) {
        return (value == null ? null : DateTime.fromSQL(value));
    }
};
DateTimeFromSqlPipe = __decorate([
    Pipe({
        name: 'dateTimeFromSql'
    })
], DateTimeFromSqlPipe);

let DateTimeLatestPipe = class DateTimeLatestPipe {
    transform(value) {
        return (value == null ? null : DateTime.max(...value));
    }
};
DateTimeLatestPipe = __decorate([
    Pipe({
        name: 'dateTimeLatest'
    })
], DateTimeLatestPipe);

let DateTimeToFormatPipe = class DateTimeToFormatPipe {
    transform(value, format) {
        return (value == null ? null : value.toFormat(format));
    }
};
DateTimeToFormatPipe = __decorate([
    Pipe({
        name: 'dateTimeToFormat'
    })
], DateTimeToFormatPipe);

let DateTimeToIsoDatePipe = class DateTimeToIsoDatePipe {
    transform(value) {
        return (value == null ? null : value.toISODate());
    }
};
DateTimeToIsoDatePipe = __decorate([
    Pipe({
        name: 'dateTimeToIsoDate'
    })
], DateTimeToIsoDatePipe);

let DateTimeToIsoTimePipe = class DateTimeToIsoTimePipe {
    transform(value) {
        return (value == null ? null : value.toISOTime());
    }
};
DateTimeToIsoTimePipe = __decorate([
    Pipe({
        name: 'dateTimeToIsoTime'
    })
], DateTimeToIsoTimePipe);

let DateTimeToIsoWeekDatePipe = class DateTimeToIsoWeekDatePipe {
    transform(value) {
        return (value == null ? null : value.toISOWeekDate());
    }
};
DateTimeToIsoWeekDatePipe = __decorate([
    Pipe({
        name: 'dateTimeToIsoWeekDate'
    })
], DateTimeToIsoWeekDatePipe);

let DateTimeToIsoPipe = class DateTimeToIsoPipe {
    transform(value) {
        return (value == null ? null : value.toISO());
    }
};
DateTimeToIsoPipe = __decorate([
    Pipe({
        name: 'dateTimeToIso'
    })
], DateTimeToIsoPipe);

let DateTimeToJsDatePipe = class DateTimeToJsDatePipe {
    transform(value) {
        return (value == null ? null : value.toJSDate());
    }
};
DateTimeToJsDatePipe = __decorate([
    Pipe({
        name: 'dateTimeToJsDate'
    })
], DateTimeToJsDatePipe);

let DateTimeToLocalPipe = class DateTimeToLocalPipe {
    transform(value) {
        return (value == null ? null : value.toLocal());
    }
};
DateTimeToLocalPipe = __decorate([
    Pipe({
        name: 'dateTimeToLocal'
    })
], DateTimeToLocalPipe);

let DateTimeToRelativePipe = class DateTimeToRelativePipe {
    constructor(ref) {
        this.ref = ref;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    transform(value, unit, style) {
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(() => this.ref.markForCheck());
        }
        return value.toRelative({
            style,
            unit
        });
    }
};
DateTimeToRelativePipe.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DateTimeToRelativePipe = __decorate([
    Pipe({
        name: 'dateTimeToRelative',
        pure: false
    })
], DateTimeToRelativePipe);

let DateTimeToRelativeCalendarPipe = class DateTimeToRelativeCalendarPipe {
    constructor(ref) {
        this.ref = ref;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    transform(value, unit) {
        if (value == null) {
            if (this.subscription) {
                this.subscription.unsubscribe();
                this.subscription = null;
            }
            return null;
        }
        if (!this.subscription) {
            this.subscription = interval(1000).subscribe(() => this.ref.markForCheck());
        }
        return value.toRelativeCalendar({
            unit
        });
    }
};
DateTimeToRelativeCalendarPipe.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DateTimeToRelativeCalendarPipe = __decorate([
    Pipe({
        name: 'dateTimeToRelativeCalendar',
        pure: false
    })
], DateTimeToRelativeCalendarPipe);

let DateTimeToSqlPipe = class DateTimeToSqlPipe {
    transform(value) {
        return (value == null ? null : value.toSQL());
    }
};
DateTimeToSqlPipe = __decorate([
    Pipe({
        name: 'dateTimeToSql'
    })
], DateTimeToSqlPipe);

let DateTimeToUtcPipe = class DateTimeToUtcPipe {
    transform(value) {
        return (value == null ? null : value.toUTC());
    }
};
DateTimeToUtcPipe = __decorate([
    Pipe({
        name: 'dateTimeToUtc'
    })
], DateTimeToUtcPipe);

let DurationFromIsoPipe = class DurationFromIsoPipe {
    transform(value) {
        return (value == null ? null : Duration.fromISO(value));
    }
};
DurationFromIsoPipe = __decorate([
    Pipe({
        name: 'durationFromIso'
    })
], DurationFromIsoPipe);

let DurationFromMillisecondsPipe = class DurationFromMillisecondsPipe {
    transform(value) {
        return (value == null ? null : Duration.fromMillis(value));
    }
};
DurationFromMillisecondsPipe = __decorate([
    Pipe({
        name: 'durationFromMilliseconds'
    })
], DurationFromMillisecondsPipe);

let DurationLongestPipe = class DurationLongestPipe {
    transform(value) {
        return (value == null ? null : [...value].sort((a, b) => b.milliseconds - a.milliseconds)[0]);
    }
};
DurationLongestPipe = __decorate([
    Pipe({
        name: 'durationLongest'
    })
], DurationLongestPipe);

let DurationShortestPipe = class DurationShortestPipe {
    transform(value) {
        return (value == null ? null : [...value].sort((a, b) => a.milliseconds - b.milliseconds)[0]);
    }
};
DurationShortestPipe = __decorate([
    Pipe({
        name: 'durationShortest'
    })
], DurationShortestPipe);

let DurationToFormatPipe = class DurationToFormatPipe {
    transform(value, format) {
        return (value == null ? null : value.toFormat(format));
    }
};
DurationToFormatPipe = __decorate([
    Pipe({
        name: 'durationToFormat'
    })
], DurationToFormatPipe);

let DurationToIsoPipe = class DurationToIsoPipe {
    transform(value) {
        return (value == null ? null : value.toISO());
    }
};
DurationToIsoPipe = __decorate([
    Pipe({
        name: 'durationToIso'
    })
], DurationToIsoPipe);

const PIPES = [
    DateTimeEarliestPipe,
    DateTimeFromFormatPipe,
    DateTimeFromHttpPipe,
    DateTimeFromIsoPipe,
    DateTimeFromJsDatePipe,
    DateTimeFromMillisecondsPipe,
    DateTimeFromRfc2822Pipe,
    DateTimeFromSqlPipe,
    DateTimeLatestPipe,
    DateTimeToFormatPipe,
    DateTimeToIsoDatePipe,
    DateTimeToIsoTimePipe,
    DateTimeToIsoWeekDatePipe,
    DateTimeToIsoPipe,
    DateTimeToJsDatePipe,
    DateTimeToLocalPipe,
    DateTimeToRelativePipe,
    DateTimeToRelativeCalendarPipe,
    DateTimeToSqlPipe,
    DateTimeToUtcPipe,
    DurationFromIsoPipe,
    DurationFromMillisecondsPipe,
    DurationLongestPipe,
    DurationShortestPipe,
    DurationToFormatPipe,
    DurationToIsoPipe
];
let LuxonModule = class LuxonModule {
};
LuxonModule = __decorate([
    NgModule({
        declarations: PIPES,
        exports: [PIPES]
    })
], LuxonModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DateTimeEarliestPipe, DateTimeFromFormatPipe, DateTimeFromHttpPipe, DateTimeFromIsoPipe, DateTimeFromJsDatePipe, DateTimeFromMillisecondsPipe, DateTimeFromRfc2822Pipe, DateTimeFromSqlPipe, DateTimeLatestPipe, DateTimeToFormatPipe, DateTimeToIsoDatePipe, DateTimeToIsoPipe, DateTimeToIsoTimePipe, DateTimeToIsoWeekDatePipe, DateTimeToJsDatePipe, DateTimeToLocalPipe, DateTimeToRelativeCalendarPipe, DateTimeToRelativePipe, DateTimeToSqlPipe, DateTimeToUtcPipe, DurationFromIsoPipe, DurationFromMillisecondsPipe, DurationLongestPipe, DurationShortestPipe, DurationToFormatPipe, DurationToIsoPipe, LuxonModule };
//# sourceMappingURL=luxon-angular.js.map
